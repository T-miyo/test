順位付け①
売上データなどを扱う中で、各分野ごとの売上トップ５や総合売上トップ５を出したい場面があると思います。
その際には、順位付けを行う関数であるrank関数を使用するのが便利
順位付けとは、データフレームの入っている数値を最大値や最小値などのオプションを指定して順番をつけることです。
文字列の場合は、アルファベット順に順番をつけます。順位付けは、
複数の店舗の中から売上トップ10のお店を知りたいという時などに使用することができます。
rank関数は順位付けしたいカラムを指定して、以下のように使用

データフレーム[カラム名].rank(ascending=引数,method=引数)

商品の返品数や直近購入日までの日数のように、値が小さい方が順位が良くなるように順位付けを行いたいケースも存在します。
そのような時には、引数ascendingを使用
ascending：Trueとすることで昇順に順位付けされ、Falseで降順になります。
import pandas as pd
 
# 0で初期化された3行3列のDataFrameを作成
df = pd.DataFrame([235, 534, 345, 843], index=[0,1,2,3], columns=['A'])

print(df["A"].rank(ascending=True,method="average"))
 
# 表示
print(df)

rank関数は、オプションとして多くの項目を指定することができます。
このオプションが、sort関数との違いになります。sort関数では昇順または降順に表示することしかできませんが、
rank関数ではどのような基準(method)で順位付けを行うかや、複数項目を用いた総合的な順位付けを行うことができます。

データフレーム[カラム名].rank(ascending=引数,method=引数)

同一の順位の時に同率一位とするのかどうかといったことも順位付けを行うときには考えなければなりません。
売上の販売個数の順位付けなどの際に、両方1位とするのか両方2位とするかで結果に対して与える印象が変わります。
引数method では、同一の順位をどう扱うかを決めることができます。

method = 'min'：同一の順位の時、最小値が順位となる
（例）どちらかが2位・3位の場合、両方ともこの２つの最小値である2位となり、次の値は4位からになる

method = 'max'：同一の順位の時、最大値が順位となる
（例）どちらかが2位・3位の場合、両方ともこの２つの最大値である3位となる

import pandas as pd
df = pd.read_excel('会員別課金額.xlsx')

df["順位"] = df["請求金額(割引前)"].rank(ascending="False",method="min")

print(df["順位"].mean())

method = 'average'：同一の順位の時、平均値が順位となる
（例）どちらかが2位・3位の場合、両方とも「(2+3)/2 = 2.5」となる。

method = 'dense'：同一の順位の時、最小値が順位となり後続の順位は詰められる
（例）どちらかが2位・3位の場合、両方ともこの２つの最小値である2位となり、次の順位は3位からになる

