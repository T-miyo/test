モデルの学習準備【ホールドアウト検証】
前回は欠陥検出用のモデル定義を行いました。
今回はGYM：PyTorch道場のニューラルネットの作成【IrisNet】と同様に下記の学習準備を行っていきます。

#0：データの検証法選定
#1：最適化手法選定
#2：loss関数の選定
まず、#0：データの検証法選定についてです。
闇雲にデータを使って学習させたとしても、意味のある学習でないと今までの苦労が無駄になってしまいます。
なので、データの検証方法を決めてから、モデルの学習を進めていきましょう。
画像データのフォルダ構成をまず考えていきましょう。

【画像データフォルダ構成】

└── image_data
     ├── train
     │      ├── ng
     │      │   ├── cast_def_0_XXXX.jpeg
     │      │   ├── ・・・
     │      │   └── cast_def_0_XXXX.jpeg
     │      └── ok
     │          ├── cast_ok_0_XXXX.jpeg
     │          ├── ・・・
     │          └── cast_ok_0_XXXX.jpeg
     └── val
           ├── ng
           │   ├── cast_def_0_XXXX.jpeg
           │   ├── ・・・
           │   └── cast_def_0_XXXX.jpeg
           └── ok
               ├── cast_ok_0_XXXX.jpeg
               ├── ・・・
               └── cast_ok_0_XXXX.jpeg
うまく学習用のデータフォルダ（train）と検証用のフォルダ（val）がわかれて存在しています。
よって今回はtrainフォルダのデータを使ってモデルの学習を行い、valフォルダのデータを使ってモデルの検証を行いましょう。
上記のようなデータ全体を学習用データとテストデータに分割し、モデルの精度を確かめる手法をホールドアウト法（Hold-out）と言います。
