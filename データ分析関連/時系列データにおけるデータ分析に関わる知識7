SARIMAモデルのパラメータチューニング
前回まででSARIMAモデルの作成方法を学びました。
今回はより精度をあげるために、パラメータのチューニング方法を学んでいきましょう。

SARIMAモデルでは、order(p, d, q)とseasonal_order(sp, sd, sq)の6種類の値が基本的なチューニングの対象となります。
p、ｑは最大3、ｄは最大1、sp、ｓｄ、ｓｑは最大2の中で探索することが効率的なチューニングとなります。

そのため、原始的ではありますが上記の範囲で総当たりで探索を行い、最もAICが小さいパラメータを探索させていきます。
SARIMAは精度の高いモデルではありますが、複数のパラメータを持っているため、チューニングにより良いパラメータを見つけ出すことも重要なこととなります。

作成したモデルの予測結果確認
前回までにチューニンングしたモデルを使って、予測結果を確認してみましょう。

import pandas as pd
import statsmodels.api as sm
import warnings
warnings.simplefilter('ignore')

# データの読み込み
df = pd.read_csv("avocado_encoded_m3.csv")
df.index=pd.to_datetime(df['Date'])

# SARIMAモデルの作成
sarima = sm.tsa.statespace.SARIMAX(df['Total Volume'],order=(3, 1, 3) ,seasonal_order=(0, 2, 2, 12)).fit()
モデルの予測結果は.predict(開始期間,終了期間)を使って予測値を得ることができます。
print(sarima.predict('2018-01-07','2018-03-25'))

Out[1]: Date
        2018-01-07    4994.455440
        2018-01-14    3403.052129
        2018-01-21    4566.426860
        2018-01-28    2509.694133
        2018-02-04    4282.700802
        2018-02-11    3278.743089
        2018-02-18    3333.489356
        2018-02-25    5572.269832
        2018-03-04    5184.233398
        2018-03-11    4211.786640
        2018-03-18    2888.100390
        2018-03-25    3176.013729
        Name: predicted_mean, dtype: float64

前回までで分割しておいたテストデータを使って、実測値と予測値をプロットしてみましょう。

In [2]: # ライブラリのインポート
        from matplotlib import pylab as plt
        
        # 評価用データの読み込み
        test = pd.read_csv('test.csv')
        test.index=pd.to_datetime(test['Date'])
        
        
        # 実データと予測結果の図示
        plt.plot(test['Total Volume'], label='original')
        plt.plot(sarima.predict('2018-01-07','2018-03-25'), label='predicted', color='red')
        plt.legend(loc='best')
        plt.show()
fig77.png

後半の下降のトレンドなどは掴めていますが、前半の予測はあまりよくありません。
入門編としてはここまでの説明となりますが、是非とも今回のSARIMAモデルを超えるモデルを作成してみてください。
