#signateのコンペで音楽のジャンル推定に参加した際に実施するコードの参考にしたコード

#必要なモジュールのインストール
!pip install xgboost
import numpy as np
import pandas as pd
import xgboost as xgb

#データの読み込み
df = pd.read_csv('アヤメの品種分類.csv',encoding='shift-jis')

#予測ターゲットの格納（品種：E列）
target_df = df[["品種"]]
#特徴量の格納（説明変数：A~B列）
train_df = df.iloc[:,0:4]

#モデル学習のための、訓練データとテストデータを7:3で分割
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(train_df, target_df, test_size=0.3)

#XGBoostで学習するためのデータ形式に変換
dtrain = xgb.DMatrix(X_train, y_train)
dvalid = xgb.DMatrix(X_test, y_test)

#モデルパラメータの設定
param = {'objective': 'multi:softmax', 'num_class': 15}
num_round = 100
bst = xgb.train(param, dtrain, num_round)

#予測の実行と書き出し
dtest = xgb.DMatrix(X_test)
pred = bst.predict(dtest)
print(pred)

#予測の精度の出力
from sklearn.metrics import accuracy_score
score = accuracy_score(y_test, pred)
print('score:{0:.4f}'.format(score))

# 性能向上に寄与する度合いで重要度をプロット
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(font=['Meiryo','Yu Gothic'])

_, ax = plt.subplots(figsize=(12, 4))
xgb.plot_importance(bst,
ax=ax,
importance_type='gain',
show_values=False)
plt.show()

実際は提出時の予測の数値がfloat型だったのでint型に変換して提出した
datetypeはnumpyだったので、「Array = myArray.astype(int)」で実施
