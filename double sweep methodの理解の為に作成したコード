import sys
sys.setrecursionlimit(10**6)  # 再帰の深さの上限を設定

def dfs(node, parent, graph, dist):
    print(10, node, parent, graph, dist)
    for next_node in graph[node]:
        if next_node == parent:
            continue
        dist[next_node] = dist[node] + 1
        dfs(next_node, node, graph, dist)

def main():
    n, m = map(int, input().split())
    graph = [[] for _ in range(n)]
    for _ in range(m):
        a, b = map(int, input().split())
        a -= 1
        b -= 1
        # 辺の追加
        graph[a].append(b)
        graph[b].append(a)

    # 頂点0から一番遠い頂点を探す
    dist_from0 = [0] * n
    dfs(0, -1, graph, dist_from0)
    farthest_node_from0 = 0
    for i in range(1, n):
        if dist_from0[i] > dist_from0[farthest_node_from0]:
            farthest_node_from0 = i

    # 頂点0から一番遠い頂点からさらに一番遠い頂点を探す
    dist = [0] * n
    dfs(farthest_node_from0, -1, graph, dist)
    farthest_node = 0
    for i in range(1, n):
        if dist[i] > dist[farthest_node]:
            farthest_node = i

    print(graph)
    print(dist[farthest_node])

if __name__ == "__main__":
    main()
