画像を読み込みと表示
# ioモジュールのインポート
from skimage import io

# 画像を読み込んで画像の中身を確認する
img = io.imread("cat.jpg")
print(img)
print(type(img))

この時に注意が必要なのは、読み込んだデータは数値のリスト型で読み込まれています。

画像の大きさの確認
# 画像の大きさを確認
print(img.shape)
このとき、出力は(高さ, 幅, チャンネル数)のようにタプル形式になります。
高さ、幅はそれぞれ画像の縦サイズと横サイズを表します。
チャンネル数はピクセルにおけるデータサイズを表します。この場合、カラーチャンネル(RGB)の数を意味します。
例えば、(100,100,3)と出力された場合、その画像は高さ100、幅100で3つのカラーチャンネルを持つ次のようなカラー画像と言えます。
一方で、(100,100)と出力された場合、
その画像は高さ100、幅100で1つのカラーチャンネルを持つ次のようなグレースケール（白黒）画像と言えます。

グレースケールでは１つの行列で画像データを表現することが可能
カラー画像を表現することは複雑、カラー画像を表現する方法はいくつかあり最も基本的なRGB表現
RGB表現において、画像はRed,Green,Blueのそれぞれに対応する３つの行列に表現され、
グレースケールよりも複雑な色を表現することができます。
例えば、R,G,Bすべての値が２５５の場合は画像が白色になり、
Rのみ２５５でG,Bの値がそれぞれ０の場合は赤色が表現されます。
このようにR,G,Bそれぞれの値を組み合わせることで計算機上でカラー画像が表現されます。

画像を表示
# pltのインポート
from matplotlib import pyplot as plt
# 画像の表示
plt.imshow(img)
plt.show()

複数の画像を表示
複数の画像を一度に表示するには、subplot関数を使い、下記のように記述
subplot(縦に並べるプロットの数, 横に並べるプロットの数, プロット番号(何番目のプロットか))
次のように記述することで、1×3の形で表示
# 1行3列の複数画像の出力

# 1行3列の1番目
plt.subplot(1,3,1)
plt.imshow(img)

# 1行3列の2番目
plt.subplot(1,3,2)
plt.imshow(img)

# 1行3列の3番目
plt.subplot(1,3,3)
plt.imshow(img)

plt.show()

画像を切り出し
画像加工の一つに、画像から一部分だけを取り出す切り出しという操作があります。
変数A = io.imread("サンプル画像.jpg")
変数Aには画像を表現するデータが配列として代入されています。
配列の一部を切り出すときにと同様にスライス：を使用
変数A[縦軸始点:縦軸終点, 横軸始点:横軸終点]
縦軸のみを切り出したい場合は
変数A[50:100]
横軸のみを切り出したい場合
変数A[  :  ,  50:100]

# 画像切り出し
img_trim = img[100:300,200:400]

# 切り出した画像表示
plt.imshow(img_trim)

画像を反転
配列データであるということは左右対称の画像も簡単に作成することができます。
配列は次のように記述することで逆順で出力することができます。

配列[::-1]
画像も配列データであるため、上記の構文を利用して水平反転、垂直反転を行うことができます。
例えば**垂直反転（上下反転）**を行う場合は次のように記述します。

画像配列[::-1,:]
この場合垂直反転なので、画像配列[高さ,幅]の高さを逆順にし、幅には何も操作をしないことを意味する:を記述

# 配列の定義
tmp = np.array([1,2,3,4,5])
# 配列の表示
print(tmp)
# 反転した配列の表示
print(tmp[::-1])

# 画像の読み込み
img = io.imread("cat.jpg")
# 画像の反転
img_inv = img[:, ::-1]

# 画像の複数表示
plt.subplot(1,2,1)
plt.imshow(img)
plt.subplot(1,2,2)
plt.imshow(img_inv)

plt.show()

画像をリサイズ
